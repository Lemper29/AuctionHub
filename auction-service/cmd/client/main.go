package main

import (
	"context"
	"fmt"
	pb "github/auction/auction-service/gen/proto"
	"io"
	"log"

	"google.golang.org/grpc"
)

func main() {
	ctx := context.Background()

	conn, err := grpc.Dial("localhost:8080", grpc.WithInsecure())
	if err != nil {
		log.Fatalf("could not connect: %v", err)
	}
	defer conn.Close()

	client := pb.NewAuctionServiceClient(conn)

	for {
		// –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞
		fmt.Println("\n=== –ê–£–ö–¶–ò–û–ù ===")
		fmt.Println("1 - –°–æ–∑–¥–∞—Ç—å –ª–æ—Ç")
		fmt.Println("2 - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ª–æ—Ç")
		fmt.Println("3 - –°–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É")
		fmt.Println("0 - –í—ã—Ö–æ–¥")
		fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä: ")

		var choice int
		fmt.Scanln(&choice)

		switch choice {
		case 1:
			createLotInteractive(client, ctx)
		case 2:
			subscribeToLotInteractive(client, ctx)
		case 3:
			placeBidInteractive(client, ctx)
		case 0:
			fmt.Println("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
			return
		default:
			fmt.Println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
		}
	}
}

func createLotInteractive(client pb.AuctionServiceClient, ctx context.Context) {
	var name, description string
	var startPrice float64
	var durationMinute int64

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞: ")
	fmt.Scanln(&name)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ—Ç–∞: ")
	fmt.Scanln(&description)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—Ç–æ–≤—É—é —Ü–µ–Ω—É: ")
	fmt.Scanln(&startPrice)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–∫—Ü–∏–æ–Ω–∞ (–º–∏–Ω—É—Ç—ã): ")
	fmt.Scanln(&durationMinute)

	createLot, err := client.CreateLot(ctx, &pb.CreateLotRequest{
		Name:           name,
		Description:    description,
		StartPrice:     startPrice,
		DurationMinute: durationMinute,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞: %v", err)
		return
	}

	// –í–´–í–û–î–ò–ú ID –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!
	fmt.Printf("‚úÖ –õ–æ—Ç —Å–æ–∑–¥–∞–Ω! ID: %s\n", createLot.Lot.Id)
	fmt.Printf("   –ù–∞–∑–≤–∞–Ω–∏–µ: %s\n", createLot.Lot.Name)
	fmt.Printf("   –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ü–µ–Ω–∞: %.2f\n", createLot.Lot.StartPrice)
}

func subscribeToLotInteractive(client pb.AuctionServiceClient, ctx context.Context) {
	var lotID string

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ª–æ—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏: ")
	fmt.Scanln(&lotID)

	// –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–æ—Ç–∞
	_, err := client.GetLot(ctx, &pb.GetLotRequest{LotId: lotID})
	if err != nil {
		log.Printf("‚ùå –õ–æ—Ç —Å ID %s –Ω–µ –Ω–∞–π–¥–µ–Ω: %v", lotID, err)
		return
	}

	stream, err := client.SubscribeToLot(ctx, &pb.SubscribeToLotRequest{
		LotId: lotID,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
		return
	}

	fmt.Printf("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ª–æ—Ç %s –∞–∫—Ç–∏–≤–Ω–∞...\n", lotID)
	fmt.Println("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")

	for {
		lot, err := stream.Recv()
		if err == io.EOF {
			fmt.Println("–ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
			break
		}
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: %v", err)
			break
		}

		fmt.Printf("üì¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: %s - —Ü–µ–Ω–∞: %.2f, –ø–æ–±–µ–¥–∏—Ç–µ–ª—å: %s\n",
			lot.Lot.Name,
			lot.Lot.CurrentPrice,
			lot.Lot.CurrentWinner)
	}
}

func placeBidInteractive(client pb.AuctionServiceClient, ctx context.Context) {
	var lotID, userID string
	var amount float64

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –ª–æ—Ç–∞: ")
	fmt.Scanln(&lotID)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
	fmt.Scanln(&userID)

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏: ")
	fmt.Scanln(&amount)

	response, err := client.PlaceBid(ctx, &pb.PlaceBidRequest{
		LotId:  lotID,
		UserId: userID,
		Amount: amount,
	})
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å—Ç–∞–≤–∫–∏: %v", err)
		return
	}

	if response.Success {
		fmt.Println("‚úÖ –°—Ç–∞–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
		fmt.Printf("   –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: %.2f\n", response.UpdatedLot.CurrentPrice)
	} else {
		fmt.Printf("‚ùå –°—Ç–∞–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: %s\n", response.Message)
	}
}
